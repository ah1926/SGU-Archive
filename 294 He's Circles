#include <cstdio>
#include <cstring>
#include <vector>

using namespace std;

typedef long long LL;

const int Base = 1000000000;
const int MaxC = 11000;
const int MaxN = 400000;

class Huge {
  public: int n[MaxC];

	Huge () {
	    memset(n, 0, sizeof(n));
	}

	Huge(int A) {
	    *this = A;
	}

    void operator= (Huge A) {
        memcpy(n, A.n, sizeof(A.n));
	}

	void operator= (int A) {
	    memset(n, 0, sizeof(n));
		for (; A > 0; A /= Base)
            n[++n[0]] = A % Base;
	}

	Huge operator+ (Huge A) const {
		Huge B; int i, T = 0;
		for (i = 1; i <= A.n[0] || i <= n[0] || T; ++i, T /= Base)
			B.n[i] = (T += (A.n[i] + n[i])) % Base;
		B.n[0] = i - 1;
		return B;
	}

	Huge operator* (Huge A) const {
		Huge C; int i, j; LL T;
		for (i = 1; i <= n[0]; ++i) {
			for (T = 0, j = 1; j <= A.n[0] || T; ++j, T /= Base)
				C.n[i + j - 1] = (T += (C.n[i + j - 1] + 1LL * n[i] * A.n[j])) % Base;
			if (i + j - 2 > C.n[0])
                C.n[0] = i + j - 2;
		}
		return C;
	}

	inline Huge operator/ (int B) const {
		Huge A = *this; LL T = 0;
		for (int i = A.n[0]; i > 0; --i, T %= B)
			A.n[i] = (T = T * Base + A.n[i]) / B;
		for (; A.n[0] > 1 && !A.n[A.n[0]]; --A.n[0]);
		return A;
	}

	inline void Print() const {
	    printf("%d", n[n[0]]);
	    for (int i = n[0] - 1; i > 0; --i)
            printf("%.9d", n[i]);
	}
};

inline Huge Pow(Huge X, int P) {
    Huge R = 1;
    while (P) {
        if (P&1)
            R = R * X, P ^= 1;
        else
            X = X * X, P >>= 1;
    }
    return R;
}

inline int GCD(int X, int Y) {
    while (Y) {
        int R = X % Y;
        X = Y;
        Y = R;
    }
    return X;
}

int ReqPow[MaxN];

int main() {
    int N; Huge Sum = 0;
    scanf("%d", &N);
    for (int i = 0; i < N; ++i)
        ++ReqPow[GCD(i, N)];
    for (int i = 0; i < 2 * N; ++i) {
        ReqPow[i + 1] += ReqPow[i] / 2; ReqPow[i] %= 2;
        if (ReqPow[i])
            Sum = Sum + Pow(Huge(2), i);
    }
    Sum = Sum / N;
    Sum.Print();
    return 0;
}
