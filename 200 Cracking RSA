#include <cstdio>
#include <bitset>
#include <algorithm>
#include <cassert>

using namespace std;

const int MaxN = 105;
const int MaxV = 100000;

bitset<MaxN> A[MaxN];
int N, M, Primes[MaxN], FreeVariables;
int Sol[MaxN];

inline void Multiply(int X[], int Y) {
    int i, T = 0;
    for (i = 1; i <= X[0] || T; ++i, T /= 10)
        X[i] = (T += X[i] * Y) % 10;
    X[0] = i - 1;
}

void Eratosthenes() {
    bitset<MaxV> V; V.reset();
    int n = 0;
    for (int i = 2; i < MaxV && n < N; ++i) {
        if (!V[i]) {
            Primes[n++] = i;
            for (int j = i; j < MaxV; j += i)
                V[j] = 1;
        }
    }
}

void Gauss() {
    int i = 0, j = 0;
    while (i < N && j < M) {
        int k;
        for (k = i; k < N && A[k][j] == 0; ++k);
        if (k == N) {
            ++j; continue;
        }
        swap(A[i], A[k]);
        --FreeVariables;
        for (k = 0; k < N; ++k)
            if (k != i && A[k][j])
                A[k] ^= A[i];
        ++i, ++j;
    }
}

void Solve() {
    FreeVariables = M;
    Gauss();
    Sol[0] = Sol[1] = 1;
    for (int i = 1; i <= FreeVariables; ++i)
        Multiply(Sol, 2);
    --Sol[1];
}

void Read() {
    assert(scanf("%d %d", &N, &M) == 2);
    Eratosthenes();
    for (int j = 0; j < M; ++j) {
        int X; assert(scanf("%d", &X) == 1);
        for (int i = 0; i < N; ++i)
            for (; X % Primes[i] == 0; X /= Primes[i], A[i][j] = 1 ^ A[i][j]);
    }
}

void Print() {
    for (int i = Sol[0]; i > 0; --i)
        printf("%d", Sol[i]);
    printf("\n");
}

int main() {
    Read();
    Solve();
    Print();
    return 0;
}
